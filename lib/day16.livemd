# Day 16

## Setup

```elixir
samples_part_a = [
  "D2FE28",
  "38006F45291200",
  "EE00D40C823060",
  "8A004A801A8002F478",
  "620080001611562C8802118E34",
  "C0015000016115A2E0802F182340",
  "A0016C880162017C3686B18A3D4780"
]

samples_part_b = [
  "C200B40A82",
  "04005AC33890",
  "880086C3E88112",
  "CE00C43D881120",
  "D8005AC2A8F0",
  "F600BC2D8F",
  "9C005AC2F8F0",
  "9C0141080250320F1802104A08"
]

input =

```

## Part a

```elixir
defmodule Day16 do
  @hex_dict """
  0 = 0000
  1 = 0001
  2 = 0010
  3 = 0011
  4 = 0100
  5 = 0101
  6 = 0110
  7 = 0111
  8 = 1000
  9 = 1001
  A = 1010
  B = 1011
  C = 1100
  D = 1101
  E = 1110
  F = 1111
  """

  # Part A
  def decode(hex_string) do
    hex_string
    |> hex_to_binary
    |> parse_transmission()
    |> tap(&IO.puts(inspect(&1)))
  end

  def sum_versions([]), do: 0

  def sum_versions([%{version: version, sub_packets: sub_packets} | maps]) do
    version + sum_versions(sub_packets) + sum_versions(maps)
  end

  def sum_versions([%{version: version} | maps]) do
    version + sum_versions(maps)
  end

  def parse_transmission(transmission), do: parse_transmission(transmission, [])

  def parse_transmission("", array_of_maps), do: array_of_maps

  def parse_transmission(transmission, array_of_maps) do
    # IO.puts("Parsing transmission: #{inspect(transmission)}")

    if bin_to_hex(transmission) == 0 do
      array_of_maps
    else
      {rest, map} = parse_packet(transmission)
      parse_transmission(rest, array_of_maps ++ [map])
    end
  end

  def parse_n_packets(transmission, n), do: parse_n_packets(transmission, n, [])
  def parse_n_packets(transmission, 0, maps), do: {transmission, maps}

  def parse_n_packets(transmission, n, maps) do
    {rest, map} = parse_packet(transmission)
    parse_n_packets(rest, n - 1, maps ++ [map])
  end

  def parse_packet(packet) do
    packet
    |> parse_version()
    |> parse_type_id()
    |> parse_payload()
  end

  def hex_to_bin(hex) do
    @hex_dict
    |> String.split(["\n", " = "], trim: true)
    |> Enum.chunk_every(2)
    |> Enum.reduce(%{}, fn [head | tail], acc ->
      Map.put(acc, head, hd(tail))
    end)
    |> Map.fetch!(hex)
  end

  def bin_to_hex(bin) do
    Integer.parse(bin, 2) |> elem(0)
  end

  def hex_to_binary(string), do: hex_to_binary(string, "")
  def hex_to_binary("", response), do: response

  def hex_to_binary(<<a, rest::binary>>, response) do
    hex_to_binary(rest, response <> hex_to_bin(<<a>>))
  end

  def parse_version(<<version::binary-size(3), rest::binary>>) do
    {rest, Map.put(%{}, :version, bin_to_hex(version))}
  end

  def parse_type_id({<<type_id::binary-size(3), rest::binary>>, map}) do
    {rest, Map.put(map, :type_id, bin_to_hex(type_id))}
  end

  def parse_payload({payload, %{type_id: 4} = map}) do
    parse_literal(payload, map)
  end

  def parse_payload({payload, map}) do
    parse_operator(payload, map)
  end

  def parse_literal(string, map), do: parse_literal(string, "", map)

  def parse_literal(<<"0", payload::binary>>, response, map) do
    <<bin::binary-size(4), rest_of_transmission::binary>> = payload
    {rest_of_transmission, Map.put(map, :literal, bin_to_hex(response <> bin))}
  end

  def parse_literal(<<"1", payload::binary>>, response, map) do
    <<bin::binary-size(4), rest::binary>> = payload
    parse_literal(rest, response <> bin, map)
  end

  def parse_operator(<<"0", payload::binary>>, map) do
    <<length_in_bits::binary-size(15), rest::binary>> = payload
    bits = bin_to_hex(length_in_bits)
    <<sub_packets::binary-size(bits), rest_of_transmission::binary>> = rest
    parsed_sub_packets = parse_transmission(sub_packets)

    new_map =
      map
      # |> Map.put(:length_in_bits, bits)
      |> Map.put(:sub_packets, parsed_sub_packets)

    {rest_of_transmission, new_map}
  end

  def parse_operator(<<"1", payload::binary>>, map) do
    <<length_in_packets::binary-size(11), rest::binary>> = payload
    packets = bin_to_hex(length_in_packets)

    {rest_of_transmission, parsed_sub_packets} = parse_n_packets(rest, packets)

    new_map =
      map
      # |> Map.put(:length_in_packets, packets)
      |> Map.put(:sub_packets, parsed_sub_packets)

    {rest_of_transmission, new_map}
  end

  # Part B
  def calculate(%{literal: literal}), do: literal

  def calculate(%{type_id: 0, sub_packets: sub_packets}) do
    case length(sub_packets) do
      1 -> calculate(sub_packets)
      _ -> Enum.sum(calculate(sub_packets))
    end
  end

  def calculate(%{type_id: 1, sub_packets: sub_packets}) do
    case length(sub_packets) do
      1 -> calculate(sub_packets)
      _ -> Enum.product(calculate(sub_packets))
    end
  end

  def calculate(%{type_id: 2, sub_packets: sub_packets}) do
    case length(sub_packets) do
      1 -> calculate(sub_packets)
      _ -> Enum.min(calculate(sub_packets))
    end
  end

  def calculate(%{type_id: 3, sub_packets: sub_packets}) do
    case length(sub_packets) do
      1 -> calculate(sub_packets)
      _ -> Enum.max(calculate(sub_packets))
    end
  end

  def calculate(%{type_id: other, sub_packets: sub_packets}) do
    compare(
      sub_packets |> calculate |> Enum.at(0),
      sub_packets |> calculate |> Enum.at(1),
      other
    )
  end

  def calculate([map]), do: calculate(map)
  def calculate(maps), do: maps |> Enum.map(&calculate/1)

  def compare(a, b, 5) do
    if a > b do
      1
    else
      0
    end
  end

  def compare(a, b, 6) do
    if a < b do
      1
    else
      0
    end
  end

  def compare(a, b, 7) do
    if a == b do
      1
    else
      0
    end
  end
end

# for sample <- samples_part_a do
#   IO.puts("### Sample is: #{sample}")
#   IO.puts("### Sum of versions is: #{inspect(sample |> Day16.decode() |> Day16.sum_versions())}")
# end

input |> Day16.decode() |> Day16.sum_versions()
```

## Part b

```elixir
# for sample <- samples_part_b do
#   IO.puts("### Sample is: #{sample}")
#   IO.puts("### Calculations is: #{inspect(Day16.decode(sample) |> Day16.calculate())}")
# end

input |> Day16.decode() |> Day16.calculate()
```
